datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

model User {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  avatar        String    @default(value: "https://cdn0.iconfinder.com/data/icons/set-ui-app-android/32/8-512.png")
  username      String    @unique
  password      String
  email         String    @unique
  firstName     String    @default(value: "")
  lastName      String
  bio           String
  following     User[]    @relation("UserFollows", fields: [followingIDs])
  followingIDs  String[]  @db.Array(ObjectId)
  followers     User[]    @relation("UserFollows", fields: [followedByIDs])
  followedByIDs String[]  @db.Array(ObjectId)
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  channels      Channel[]
  loginSecret   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  message       Message[]
}

model Post {
  id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  location  String
  caption   String
  user      User      @relation(fields: [authorId], references: [id])
  files     File[]
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String    @db.ObjectId
}

model Like {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
}

model Comment {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  text      String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
}

model File {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  url       String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
}

model Channel {
  id           String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  participants User[]
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
